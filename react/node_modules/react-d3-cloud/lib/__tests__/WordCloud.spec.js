'use strict';

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTestRenderer = require('react-test-renderer');

var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);

var _WordCloud = require('../WordCloud');

var _WordCloud2 = _interopRequireDefault(_WordCloud);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('index.js', function () {
  var data = [{ text: 'Hey', value: 1000 }, { text: 'lol', value: 200 }, { text: 'cool', value: 1 }, { text: 'duck', value: 10 }];

  var _ref = _jsx(_WordCloud2.default, {
    data: data
  });

  it('should contain all words', function () {
    var originalRandom = Math.random;
    Math.random = jest.fn().mockReturnValue(0.5);
    var component = _reactTestRenderer2.default.create(_ref).toJSON();
    expect(component).toMatchSnapshot();
    Math.random = originalRandom;
  });

  it('should call custom fontSizeMapper', function () {
    var fontSizeMapper = jest.fn().mockReturnValue(10);
    _reactTestRenderer2.default.create(_jsx(_WordCloud2.default, {
      data: data,
      fontSizeMapper: fontSizeMapper
    }));
    expect(fontSizeMapper.mock.calls.length).toBe(data.length);
  });

  it('should call custom rotater', function () {
    var rotate = jest.fn().mockReturnValue(1);
    _reactTestRenderer2.default.create(_jsx(_WordCloud2.default, {
      data: data,
      rotate: rotate
    }));
    expect(rotate.mock.calls.length).toBe(data.length);
  });
});